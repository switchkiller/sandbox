
#include <bitset>
#include <vector>
#include <iostream>
using namespace std;

#define ll long long
typedef vector<int> vi;

ll sieve_size;
bitset<10000010> bs;
vi primes;

void sieve(ll upperbound){
	sieve_size = upperbound + 1;
	bs.set();
	bs[0] = bs[1] = 0;
	for (ll i = 2; i <= sieve_size; i++)
		if (bs[i]){
			for (ll j = i * i; j <= sieve_size; j += i) bs[j] = 0;
			primes.push_back((int) i);
		}
}

bool isPrime(ll N){
	if (N <= sieve_size) return bs[N];
	for (int i = 0; i < (int) primes.size(); i++)
		if (N % primes[i] == 0) return false;
	return true;
}



ll numDiv(ll N){
	ll PF_idx = 0, PF = primes[PF_idx], ans = 1;
	while (PF*PF <= N){
		ll power = 0;
		while (N % PF == 0){
			N /= PF; power++;
		}
		ans *= (power+1);
		PF = primes[++PF_idx];
	}
	if (N != 1) ans *= 2;
	return ans;
}




int main()
{
	int T, N;
	sieve(10000000);
	cin >> T;
	while (T--){
		cin >> N;
		ll v = 0;
		ll ans = numDiv(N);
		if (ans % 2)
			v = (ans+1) / 2;
		else
			v = ans / 2;
		cout << v << endl;
	}
    return 0;
}
